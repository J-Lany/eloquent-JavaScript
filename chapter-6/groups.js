/*
Группы
Стандартная среда JavaScript предоставляет еще одну структуру данных, которая называется Set.
Подобно экземпляру Map, Set содержит коллекцию значений.
В отличие от Map класс Set не связывает с ними другие значения — только отслеживает, какие значения являются частью множества.
Значение может входить в состав множества только один раз — попытка добавить его снова не будет иметь никакого эффекта.
Напишите класс с именем Group (поскольку имя Set уже занято). Как и Set, он располагает методами add, delete и has.
Его конструктор создает пустую группу, и методы:
     add добавляет в нее значение (но только если такого значения там еще нет)
     delete удаляет свой аргумент из группы (если таковой тамбыл)
     has возвращает логическое значение, указывающее, является ли его аргумент членом группы.
Для того чтобы определить, одинаковы ли два значения, используйте оператор === или какой-либо его эквивалент, например indexOf.
Присвойте классу статический метод from, который принимает в качестве аргумента итерируемый объект и создает группу, содержащую все значения, полученные посредством перебора.
*/

class Group {
  constructor() {
    this.group = [];
  }

  add(item) {
    if (!this.group.includes(item)) {
      this.group = [...this.group, item];
    }
  }
  delete(item) {
    this.group = this.group.filter((i) => i !== item);
  }
  has(item) {
    return this.group.includes(item);
  }

  static from(iterable) {
    let group = new Group();
    for (i of iterable) {
      group.add(i);
    }
    return group;
  }
}
