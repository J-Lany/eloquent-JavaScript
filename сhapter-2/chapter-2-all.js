/* 1. Построение треугольника в цикле
    Напишите цикл, который делает семь вызовов console.log и выводит следующий треугольник:
    #
    ##
    ###
    ####
    #####
    ######
    #######
*/
const createTriangle = () => {
  let triangleRow = '#';
  while (triangleRow.length <= 7) {
    console.log(triangleRow);
    triangleRow = triangleRow + '#';
  }
};
/* 
 FizzBuzz
 Напишите программу, в которой с помощью console.log выводятся все чис-ла от 1 до 100 с двумя исключениями.
 Для чисел, кратных 3, вместо числа выводится "Fizz"
 Для чисел, кратных 5 (но не 3), — "Buzz".
 Когда это заработает, измените программу так, чтобы она печатала:
 "FizzBuzz" для чисел, которые делятся и на 3, и на 5
  (и по-прежнему печатайте "Fizz" или "Buzz" для чисел, кратных только одному из них).
*/

const fizzBuzz = () => {
  for (let i = 1; i <= 100; i++) {
    if (i % 3 === 0 && i % 5 === 0) {
      console.log('FizzBuzz');
    } else if (i % 3 === 0) {
      console.log('Fizz');
    } else if (i % 5 === 0) {
      console.log('Buzz');
    } else {
      console.log(i);
    }
  }
};

/*
  Шахматная доска
  Напишите программу, которая создает строку, представляющую сетку 8×8, используя для разделения строк символы новой строки.
  В каждой позиции сетки стоит либо пробел, либо символ "#". Эти символы должны располагаться в шахматном порядке.
  Передавая данную строку в console.log, вы должны получить что-то вроде этого:
  # # # #
   # # # #
  # # # #
   # # # #
  # # # #
   # # # #
  # # # #
   # # # #
  Если вы уже написали программу, которая генерирует этот узор, определите
  привязку size = 8 и измените программу так, чтобы она работала для любого
  size, выводя сетку заданных ширины и высоты.
*/

const createChessBoard = () => {
  let size = 8;
  let chessBoard = '';
  for (let row = 0; row < size; row++) {
    for (let col = 0; col < size; col++) {
      if ((row + col) % 2 === 0) {
        chessBoard = chessBoard + '#';
      } else {
        chessBoard = chessBoard + ' ';
      }
    }
    chessBoard = chessBoard + '\n';
  }
  return chessBoard;
};
