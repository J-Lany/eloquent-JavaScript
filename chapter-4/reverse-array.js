/*
Массив в обратном порядке
У массивов есть метод reverse, который изменяет порядок следования элементов в массиве.
Для выполнения этого упражнения напишите две функции: reverseArray и reverseArrayInPlace.
Первая функция, reverseArray, принимает массив в качестве аргумента и создает новый массив, содержащий
те же элементы в обратном порядке. Вторая, reverseArrayInPlace, делает
то же, что и метод reverse: преобразовывает массив, заданный в качестве
аргумента, меняя порядок следования его элементов на обратный. Не используйте для этого стандартный метод reverse.
Вспомните, что мы говорили о побочных эффектах и чистых функциях
в предыдущей главе, и ответьте на вопрос: какой из этих вариантов, по ва-
шему мнению, будет полезен в большинстве случаев? Какой из них быстрее работает?
*/

function reverseArray(arr) {
  let result = [];
  for (let i = arr.length - 1; i >= 0; i--) {
    result.push(arr[i]);
  }
  return result;
}

function reverseArrayInPlace(arr) {
  let start = 0;
  let end = arr.length - 1;
  while (start < end) {
    let saveStart = arr[start];
    arr[start] = arr[end];
    arr[end] = saveStart;
    start++;
    end--;
  }
  return arr;
}
console.log(reverseArrayInPlace([1, 2, 3, 4, 5]));

/*Больше на практике используется вариант с созданием нового массива, так как:
1. Менять поступающие данные в функцию нарушает принцип чистых функций
2. Есть мы поменяем что-то в поступивших нам данных, мы не всегда сможем откатить эти изменения
*/
