/*
Глубокое сравнение
Оператор == сравнивает объекты по их тождественности. Но иногда желательно сравнить значения их реальных свойств.
Напишите функцию deepEqual, которая принимает два значения и возвращает true, только если эти объекты имеют одинаковое значение или
являются объектами с одинаковыми свойствами и значения свойств равны при сравнении с рекурсивным вызовом deepEqual.
Чтобы выяснить, нужно сравнивать значения напрямую (для этого исполь-
зуйте оператор ===) или их свойства, можете использовать оператор typeof.
Если его результатом для обоих значений является "object", то требуется выполнить глубокое сравнение. Но вам следует принять во внимание одно
глупое исключение: исторически сложилось так, что результатом typeof
null также будет "object".
Для перебора и сравнения свойств объекта вам также пригодится функция
Object.keys.
*/

//Нарисовать блоксхему этого процесса, для глубокого понимания
function deepEqual(obj1, obj2) {
  if (Object.keys(obj1).length !== Object.keys(obj2).length) {
    return false;
  }
  for (let item in obj1) {
    console.log('Item:', item);
    console.log('obj[item]:', obj1[item]);
    if (typeof obj1 === 'object' && typeof obj2 === 'object') {
      if (!deepEqual(obj1[item], obj2[item])) {
        return false;
      }
    }
    if (obj1 !== obj2) {
      return false;
    }
  }
  return true;
}

console.log(
  deepEqual(
    { a: 'String: a', b: 'String: b', c: { f: 'String: f' } },
    { a: 'String: a', b: 'String: b', c: 'String: c' }
  )
);
